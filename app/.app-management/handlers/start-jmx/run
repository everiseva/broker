#!/usr/bin/env ruby
# Encoding: utf-8
# IBM WebSphere Application Server Liberty Buildpack
# Copyright 2014 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rexml/document'
require 'set'

# directories
INSTALL_DIR = File.expand_path('../../..', File.dirname(__FILE__)).freeze
APP_MGMT_DIR = File.join(INSTALL_DIR, '.app-management').freeze

$LOAD_PATH.unshift File.expand_path(APP_MGMT_DIR, __FILE__)

require 'utils/droplet_utils'
require 'utils/xml_utils'

# Filter (remove) features that exist in the xml doc from the set of features passed in.
#
# @param [Element] doc the root Element of the server.xml doc
# @param [Set] features a Set containing the names of the features to filter
def filter_features(doc, features)
  # Search all featureManager elements.
  managers = doc.elements.to_a('//featureManager')
  managers.each do |manager|
    elements = manager.get_elements('feature')
    elements.each do |element|
      features.delete(element.text)
    end
  end
end

# Add features to the featureManager
#
# @param [Element] doc the root Element of the jmx handler include xml document
# @param [Set] features a Set containing the names of the features to add
def add_features(doc, features)
  feature_manager = REXML::Element.new('featureManager', doc)
  features.each do |feature|
    added_feature = REXML::Element.new('feature', feature_manager)
    added_feature.add_text(feature)
  end
end

# Filter (remove) writeDir entries that exist in the xml doc from the set of writeDir entries passed in.
#
# @param [Element] doc the root Element of the server.xml doc
# @param [Set] features a Set containing the names of the writeDir entries to filter
def filter_remote_access(doc, dirs)
  # Get all existing remoteFileAccess elements. There may be none, or their may be multiple
  rfas = doc.elements.to_a('//remoteFileAccess')
  rfas.each do |rfa|
    elements = rfa.get_elements('writeDir')
    elements.each do |element|
      dirs.delete(element.text)
    end
  end
end

def add_remote_access(doc, dirs)
  root_rfa = REXML::Element.new('remoteFileAccess', doc)
  dirs.each do |dir|
    wud = REXML::Element.new('writeDir', root_rfa)
    wud.add_text(dir)
  end
end

def add_user_registry(doc)
  cur = REXML::Element.new('uaaUserRegistry', doc)
  cur.add_attribute('loginEndpoint', ENV['authorization_endpoint'])
  cur.add_attribute('cloudControllerEndpoint', ENV['cloud_controller_url'])
end

def add_administrator_role(doc)
  role = REXML::Element.new('administrator-role', doc)
  group = REXML::Element.new('group', role)
  group.add_text('CloudFoundryGroup')
end

def admin_role_exists?(doc)
  # Get the administrator-role element. Allow for multiple instances
  existing = doc.elements.to_a('//administrator-role')
  # Check all existing administrator-role elements.
  existing.each do |the_role|
    elements = the_role.get_elements('group')
    elements.each do |element|
      return true if element.text == 'CloudFoundryGroup'
    end
  end
  false
end

server_xml_dir = DropletUtils.get_server_directory(INSTALL_DIR)
server_xml_file = File.join(server_xml_dir, 'server.xml')
server_xml_doc = XmlUtils.read_xml_file(server_xml_file)

# Create a standalone "include" file containing the JMX configuration.
handler_include_doc = REXML::Document.new('<server></server>')

# add required features to the include doc. Don't duplicate entries in server.xml.
features = Set.new
features.add('restConnector-1.0')
features.add('appSecurity-2.0')
features.add('uaaUserRegistry-1.0')
filter_features(server_xml_doc.root, features)
add_features(handler_include_doc.root, features) unless features.empty?

# add remoteFileAccess to the include doc. Don't duplicate entries in server.xml.
writeable_dirs = Set.new
writeable_dirs.add('${wlp.user.dir}')
writeable_dirs.add('${server.config.dir}')
writeable_dirs.add('${server.output.dir}')
filter_remote_access(server_xml_doc.root, writeable_dirs)
add_remote_access(handler_include_doc.root, writeable_dirs) unless writeable_dirs.empty?

# add administrator role unless it already exists in server.xml.
add_administrator_role(handler_include_doc.root) unless admin_role_exists?(server_xml_doc.root)
# add user registry to the include doc. By definition it will not exist in server.xml.
add_user_registry(handler_include_doc.root)

# Write the configuration to an include file in the server directory. If the file already exists, it will be overwritten.
XmlUtils.write_formatted_xml_file(handler_include_doc, File.join(server_xml_dir, DropletUtils.jmx_handler_include_name))

# Add the include Element into server.xml. If already there, do not add again.
existing = server_xml_doc.root.elements.to_a("//include[@location='#{DropletUtils.jmx_handler_include_name}']")
if existing.size == 0
  include_file = REXML::Element.new('include', server_xml_doc.root)
  include_file.add_attribute('location', DropletUtils.jmx_handler_include_name)
  XmlUtils.write_formatted_xml_file(server_xml_doc, server_xml_file)
end
